# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y%m%d-%H:%M:%S")" >> $GITHUB_OUTPUT
        shell: bash
        
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.11
        with:
          key: ccache-${{ runner.os }}
          
      - name: Cache dl
        uses: actions/cache/restore@v3
        with:
          path: |
            plutosdr-fw/buildroot/dl/
          key: ${{ runner.os }}-dl

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        env:
          SKIP_LEGAL: 1
          XSA_URL: "https://github.com/meee1/plutoplus/releases/download/v2/system_top.xsa"
        run: |
          set -o xtrace
          sudo apt-get update
          sudo apt-get install -y git build-essential fakeroot libncurses5-dev libssl-dev ccache
          sudo apt-get install -y dfu-util u-boot-tools device-tree-compiler mtools
          sudo apt-get install -y bc python3 cpio zip unzip rsync file wget libmpc-dev 
          ./scripts/apply.sh
          export BR2_USE_CCACHE=1
          export BR2_CCACHE_DIR=$(pwd)/.ccache
          cd plutosdr-fw
          touch buildroot/board/pluto/msd/LICENSE.html
          
          make  -j8
          
      - name: Cache dl save
        uses: actions/cache/save@v3
        if: always()
        with:
          path: |
            plutosdr-fw/buildroot/dl/
          key: ${{ runner.os }}-dl-${{ steps.get-date.outputs.date }}
          
      - uses: actions/upload-artifact@v3
        with:
          name: image
          path: plutosdr-fw/build
  build2:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          set -x -e
          cd plutosdr-fw          
          make -C buildroot ARCH=arm zynq_pluto_defconfig
          make -C buildroot batctl
          cd ..   
          export PATH=`pwd`/plutosdr-fw/buildroot/output/host/bin:`pwd`/plutosdr-fw/buildroot/output/host/sbin:${PATH}
          export CROSS_COMPILE="arm-linux-gnueabihf-"
          which ${CROSS_COMPILE}gcc
          mkdir third_party
          cd third_party
          git clone https://github.com/tvelliott/libfec.git
          cd libfec          
          rm libfec.so
          make  -j8
          
  build3:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y%m%d-%H:%M:%S")" >> $GITHUB_OUTPUT
        shell: bash
        
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.11
        with:
          key: ccache-${{ runner.os }}
          
      - name: Cache dl
        uses: actions/cache/restore@v3
        with:
          path: |
            plutosdr-fw/buildroot/dl/
          key: ${{ runner.os }}-dl

      - name: setup dependancys and apply patches
        run: |
            set -o xtrace
            sudo apt-get update
            sudo apt-get install -y git build-essential fakeroot libncurses5-dev libssl-dev ccache
            sudo apt-get install -y dfu-util u-boot-tools device-tree-compiler mtools
            sudo apt-get install -y bc python3 cpio zip unzip rsync file wget libmpc-dev 
            ./scripts/apply.sh


      - name: setup toolchain and buildroot deps
        env:
          SKIP_LEGAL: 1
          XSA_URL: "https://github.com/meee1/plutoplus/releases/download/v2/system_top.xsa"
        run: |
          set -o xtrace
          export BR2_USE_CCACHE=1
          export BR2_CCACHE_DIR=$(pwd)/.ccache
          cd plutosdr-fw
          touch buildroot/board/pluto/msd/LICENSE.html

          #echo "BR2_ENABLE_DEBUG=y" >> buildroot/configs/zynq_pluto_defconfig
          #echo "BR2_LINUX_KERNEL_TOOL_PERF=y" >> buildroot/configs/zynq_pluto_defconfig
                    
          make -C buildroot ARCH=arm zynq_pluto_defconfig
          make -C buildroot toolchain
          make -C buildroot libiio
          make -C buildroot libfec
          make -C buildroot liquid-dsp
          make -C buildroot libad9361-iio
          make -C buildroot ad936x_ref_cal
          make -C buildroot libini
          make -C buildroot zlib
          
          make -C buildroot valgrind

      - name: build charon
        env:
          SKIP_LEGAL: 1
          XSA_URL: "https://github.com/meee1/plutoplus/releases/download/v2/system_top.xsa"
        run: |
          set -o xtrace
          export BR2_USE_CCACHE=1
          export BR2_CCACHE_DIR=$(pwd)/.ccache

          cd plutosdr-fw          
          export PATH=`pwd`/buildroot/output/host/bin:`pwd`/buildroot/output/host/sbin:${PATH}
          export CROSS_COMPILE="arm-linux-gnueabihf-"
          
          cd ..
          git clone https://github.com/meee1/charon.git --depth=1
          cd charon
          make -C third_party/libfec/
          cd third_party
          cd libtuntap
          sed -i 's\/usr/include/\\g' CMakeLists.txt
          sed -i 's\/usr/local/include\\g' CMakeLists.txt
          mkdir build
          cd build
          cmake .. -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++
          make
          cp lib/*.a ../
          cp tuntap-export.h ../
          cd ..
          cd ..
          cd ..
                   
          cd ..

          cp -r charon/* ./ | true
          rm -rf charon
          make

          cp charon plutosdr-fw/buildroot/output/target/usr/bin

      - name: build image
        env:
          SKIP_LEGAL: 1
          XSA_URL: "https://github.com/meee1/plutoplus/releases/download/v2/system_top.xsa"
        run: |
            set -o xtrace
            export BR2_USE_CCACHE=1
            export BR2_CCACHE_DIR=$(pwd)/.ccache
            cd plutosdr-fw
            make pluto.dfu -j8
          
      - uses: actions/upload-artifact@v3
        with:
          name: image3
          path: plutosdr-fw/build

