# This is a basic workflow to help you get started with Actions

name: CI-charon

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y%m%d-%H:%M:%S")" >> $GITHUB_OUTPUT
        shell: bash
        
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.11
        with:
          key: ccache-${{ runner.os }}
          
      - name: Cache zips
        uses: actions/cache/restore@v3
        with:
          path: |
            plutosdr-fw/buildroot/dl/
            /home/runner/.buildroot-ccache
            .ccache
          key: ${{ runner.os }}

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        env:
          SKIP_LEGAL: 1
          XSA_URL: "https://github.com/DeonMarais64/PlutoPlusSDR-FW/releases/download/v0.37%2B_datv_packages/system_top.xsa"
        run: |
          set -o xtrace
          sudo apt-get update
          sudo apt-get install -y git build-essential fakeroot libncurses5-dev libssl-dev ccache
          sudo apt-get install -y dfu-util u-boot-tools device-tree-compiler mtools
          sudo apt-get install -y bc python3 cpio zip unzip rsync file wget libmpc-dev 
          ./scripts/apply.sh
          export BR2_USE_CCACHE=1
          export BR2_CCACHE_DIR=$(pwd)/.ccache
          cd plutosdr-fw
          touch buildroot/board/pluto/msd/LICENSE.html
          
          make -C buildroot ARCH=arm zynq_pluto_defconfig
          make -C buildroot toolchain
          make -C buildroot libiio
          
          export PATH=`pwd`/buildroot/output/host/bin:`pwd`/buildroot/output/host/sbin:${PATH}
          export CROSS_COMPILE="arm-linux-gnueabihf-"
          
          cd ..
          git clone https://github.com/meee1/charon.git --depth=1
          cd charon
          git submodule update --init third_party/libtuntap/
          cd ..
          cp -r charon/* ./ | true
          rm -rf charon
          make

          cp charon plutosdr-fw/buildroot/output/target/usr/bin

          cd plutosdr-fw
          make pluto.frm
          
      - name: Save cache zips
        uses: actions/cache/save@v3
        if: always()
        with:
          path: |
            plutosdr-fw/buildroot/dl/
            /home/runner/.buildroot-ccache
            .ccache
          key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}
          
      - uses: actions/upload-artifact@v3
        with:
          name: image
          path: plutosdr-fw/build
